##
# prepare build environment
FROM node:dubnium-alpine as builder-base

ENV YARN_VERSION 1.10.1
ENV YARN_DIR /opt/yarn

RUN apk --no-cache add git python make g++

ADD https://yarnpkg.com/downloads/$YARN_VERSION/yarn-v${YARN_VERSION}.tar.gz /opt/yarn.tar.gz
RUN rm -f /usr/local/bin/yarn /usr/local/bin/yarnpkg && \
    rm -rf $YARN_DIR && \
    mkdir -p $YARN_DIR && \
    tar -xzf /opt/yarn.tar.gz -C $YARN_DIR && \
    ln -s $YARN_DIR/yarn-v$YARN_VERSION/bin/yarn $YARN_DIR/yarn-v$YARN_VERSION/bin/yarnpkg /usr/local/bin/ && \
    rm /opt/yarn.tar.gz


##
# development environment
FROM builder-base as development

ARG APPLICATION_PATH=applications/api
ENV APPLICATION_PATH=$APPLICATION_PATH

WORKDIR /srv

EXPOSE 3000

CMD ["sh", "-c", "sh ./infrastructure/docker-yarn-install.sh && cd ./$APPLICATION_PATH && yarn start"]


##
# build production environment
FROM builder-base as builder-source-code-and-deps

ARG APPLICATION_PATH=applications/api

WORKDIR /srv

COPY ./package.json /srv/package.json
COPY ./yarn.lock /srv/yarn.lock
COPY ./packages /srv/packages
COPY ./$APPLICATION_PATH/package.json /srv/$APPLICATION_PATH/package.json
RUN yarn install
COPY $APPLICATION_PATH /srv/$APPLICATION_PATH


##
# test environment
FROM builder-source-code-and-deps as stage-test

ARG APPLICATION_PATH=applications/api

WORKDIR /srv

CMD ["yarn", "run", "test"]


##
# build production environment
FROM builder-source-code-and-deps as stage-build

ARG APPLICATION_PATH=applications/api

WORKDIR /srv

RUN cd ./$APPLICATION_PATH; yarn build


##
# production environment
FROM node:dubnium-alpine

ARG APPLICATION_PATH=applications/api

WORKDIR /srv

COPY --from=stage-build /srv/$APPLICATION_PATH/dist /srv
COPY --from=stage-build /srv/$APPLICATION_PATH/node_modules /srv/node_modules
COPY --from=stage-build /srv/$APPLICATION_PATH/package.json /srv/package.json

EXPOSE 3000

CMD ["node", "./server.js"]
